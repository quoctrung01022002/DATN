// <auto-generated />
using System;
using BackEnd_DATN.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd_DATN.Migrations
{
    [DbContext(typeof(DatnTrung62132908Context))]
    [Migration("20240422144832_updatebrand")]
    partial class updatebrand
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEnd_DATN.Entities.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BannerId");

                    b.ToTable("Banner", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("CountryOfOrigin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId")
                        .HasName("PK__Brand__DAD4F3BED08ECA12");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime");

                    b.HasKey("MessageId")
                        .HasName("PK__ChatMess__C87C0C9CE15C5DCC");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessage", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comment__C3B4DFAA73EBB860");

                    b.HasIndex(new[] { "ProductId" }, "IX_Comment_ProductID");

                    b.HasIndex(new[] { "UserId" }, "IX_Comment_UserID");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscountId")
                        .HasName("PK__Discount__E43F6DF660F9A5D3");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Introduce", b =>
                {
                    b.Property<int>("IntroduceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntroduceId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntroduceId");

                    b.ToTable("Introduce", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAF01F27903");

                    b.HasIndex(new[] { "UserId" }, "IX_Orders_UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PK__OrderDet__08D097C172F442C9");

                    b.HasIndex(new[] { "DiscountId" }, "IX_OrderDetail_DiscountId");

                    b.HasIndex(new[] { "ProductId" }, "IX_OrderDetail_ProductID");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PostId")
                        .HasName("PK__Post__AA126038FA0C72D5");

                    b.HasIndex(new[] { "UserId" }, "IX_Post_UserID");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountID");

                    b.Property<bool?>("HasSpecialFeatures")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBestseller")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__B40CC6ED2EDE931D");

                    b.HasIndex(new[] { "BrandId" }, "IX_Product_BrandID");

                    b.HasIndex(new[] { "DiscountId" }, "IX_Product_DiscountID");

                    b.HasIndex(new[] { "ProductTypeId" }, "IX_Product_ProductTypeID");

                    b.HasIndex(new[] { "UserId" }, "IX_Product_UserID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductTypeId")
                        .HasName("PK__ProductT__A1312F4E941E347A");

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReplyId");

                    b.HasIndex(new[] { "CommentId" }, "IX_Reply_CommentId");

                    b.HasIndex(new[] { "UserId" }, "IX_Reply_UserId");

                    b.ToTable("Reply", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsCheckedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CartId")
                        .HasName("PK__Shopping__51BCD797C1F91DE0");

                    b.HasIndex(new[] { "UserId" }, "IX_ShoppingCart_UserID");

                    b.ToTable("ShoppingCart", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ShoppingCartDetail", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId")
                        .HasName("PK__Shopping__9AFC1BF9A1422B73");

                    b.HasIndex(new[] { "ProductId" }, "IX_ShoppingCartDetail_ProductID");

                    b.ToTable("ShoppingCartDetail", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierId")
                        .HasName("PK__Supplier__4BE66694ED468C7C");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("BlockedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Cccd")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CCCD");

                    b.Property<int?>("CodeOtp")
                        .HasColumnType("int")
                        .HasColumnName("CodeOTP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("WarningCount")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC8B38E26D");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.WarningLog", b =>
                {
                    b.Property<int>("WarningLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarningLogId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WarningTime")
                        .HasColumnType("datetime2");

                    b.HasKey("WarningLogId");

                    b.HasIndex(new[] { "UserId" }, "IX_WarningLog_UserId");

                    b.ToTable("WarningLog", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Helpers.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_RefreshTokens_UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ProductSupplier", b =>
                {
                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersSupplierId")
                        .HasColumnType("int");

                    b.HasKey("ProductsProductId", "SuppliersSupplierId");

                    b.HasIndex(new[] { "SuppliersSupplierId" }, "IX_ProductSupplier_SuppliersSupplierId");

                    b.ToTable("ProductSupplier", (string)null);
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ChatMessage", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.User", "Receiver")
                        .WithMany("ChatMessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK__ChatMessa__Recei__71D1E811");

                    b.HasOne("BackEnd_DATN.Entities.User", "Sender")
                        .WithMany("ChatMessageSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK__ChatMessa__Sende__70DDC3D8");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Comment", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Comment__Product__440B1D61");

                    b.HasOne("BackEnd_DATN.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Comment__UserID__44FF419A");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Order", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Orders__UserID__3C69FB99");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.OrderDetail", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.Discount", "Discount")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_DATN.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__403A8C7D");

                    b.HasOne("BackEnd_DATN.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Produ__412EB0B6");

                    b.Navigation("Discount");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Post", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Post__UserID__4AB81AF0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Product", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK__Product__BrandID__2C3393D0");

                    b.HasOne("BackEnd_DATN.Entities.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK__Product__Discoun__2E1BDC42");

                    b.HasOne("BackEnd_DATN.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("FK__Product__Product__2D27B809");

                    b.HasOne("BackEnd_DATN.Entities.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Product__UserID__2F10007B");

                    b.Navigation("Brand");

                    b.Navigation("Discount");

                    b.Navigation("ProductType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Reply", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_DATN.Entities.User", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ShoppingCart", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.User", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ShoppingC__UserI__5070F446");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ShoppingCartDetail", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.ShoppingCart", "Cart")
                        .WithMany("ShoppingCartDetails")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__ShoppingC__CartI__534D60F1");

                    b.HasOne("BackEnd_DATN.Entities.Product", "Product")
                        .WithMany("ShoppingCartDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ShoppingC__Produ__5441852A");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.WarningLog", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.User", "User")
                        .WithMany("WarningLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd_DATN.Helpers.RefreshToken", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductSupplier", b =>
                {
                    b.HasOne("BackEnd_DATN.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_DATN.Entities.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SuppliersSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Discount", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderDetails");

                    b.Navigation("ShoppingCartDetails");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartDetails");
                });

            modelBuilder.Entity("BackEnd_DATN.Entities.User", b =>
                {
                    b.Navigation("ChatMessageReceivers");

                    b.Navigation("ChatMessageSenders");

                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("Products");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Replies");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("WarningLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
